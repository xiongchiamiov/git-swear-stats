#!/usr/bin/env ruby
# encoding: utf-8

# May you recognize your weaknesses and share your strengths.
# May you share freely, never taking more than you give.
# May you find love and love everyone you find.

require 'docopt'
require 'git'
require 'pp'
require 'terminal-table'

# Git intercepts `git swear-stats --help`, so unfortunately most people won't
# see this usage message.  Docopt is still a great way to do parsing, though.
doc = <<DOCOPT
git-swear-stats

Usage:
   git-swear-stats [options] [messages|diffs]

Options:
   -h, --help        Show this screen.
   --debug           Print out debug messages.
   --include-merges  Look at merge commits.
   --no-progress     Don't print out progress information.

DOCOPT
begin
   options = Docopt::docopt doc
rescue Docopt::Exit => e
   puts e.message
   exit 1
end
pp options if options['--debug']

swears = {
   'shit' => %r{(dip)?shit(ty)?},
   'fuck' => %r{(cluster|mother)?(fuck|fsck|eff)(ing|er|ed|head)?},
   'cunt' => %r{cunt},
   'cock' => %r{cock(suck|sucker)?},
   'ass' => %r{(ass|arse)(hole)?},
   'bitch' => %r{bitch(y)?},
   'wtf' => %r{wtf},
   'faggot' => %r{fag(got)?},
   'damn' => %r{(god)?dam[nm](ed|able|it)?},
   'bastard' => %r{bastard},
   'hell' => %r{hell(ish)?},
   'wank' => %r{wank(er|ing)?},
}.map {|k, v| [k, /\b#{v}\b/i] }.to_h

wordStats = {}
wordStats.default = 0
authorStats = {}

repo = Git.open '.'
# By default, we only get up to 30 commits in the log.  By digging through the
# source, I found that passing nil to repo.log() ends up setting the limit to
# nil, and thus giving us all commits.
print 'Reading in git log... ' if not options['--no-progress']
log = repo.log nil
puts 'done!' if not options['--no-progress']

print 'Parsing git log' if not options['--no-progress']
log.each_with_index do |commit, i|
   # Merges often have data in them from other commits, pull request
   # descriptions, etc., so it's not really fair to count them.
   # Git::Log unfortunately appears to have no way of passing --no-merges
   # through to the underlying binary, so we have to check merges on a
   # commit-by-commit basis instead.
   next if not options['--include-merges'] and commit.parents.count > 1
   
   author = commit.author.name
   if not authorStats.key? author
      authorStats[author] = {}
      authorStats[author].default = 0
   end
   
   if !options['diffs']
      swears.each do |swear, swear_re|
         count = commit.message.scan(swear_re).size
         if count > 0
            wordStats[swear] += count
            authorStats[author][swear] += count
            authorStats[author][:total] += count
            if options['--debug']
               puts '-'*80
               puts "#{count}x #{swear}"
               puts author
               puts commit.message
               puts '-'*80
            end
         end
      end
   end
   
   if !options['messages']
      # The git module doesn't handle a diff on the initial commit very well - by
      # which I mean it throws an exception.
      # TODO: Monkeypatch the shit out of Git::Commit.
      next if commit.parents.count == 0
      
      diff = commit.diff_parent.to_s.force_encoding 'iso-8859-1'
      # We only want to look at stuff they did, not surrounding things.  We'll
      # approximate this by grepping through lines "added".
      lines = diff.split("\n")
      # Drop the first four lines to get rid of the diff header.
      lines.drop(4).keep_if {|line| line =~ /^\+/}.each do |line|
         swears.each do |swear, swear_re|
            count = line.scan(swear_re).size
            if count > 0
               wordStats[swear] += count
               authorStats[author][swear] += count
               authorStats[author][:total] += count
               if options['--debug']
                  puts '-'*80
                  puts "#{count}x #{swear}"
                  puts author
                  puts line
                  puts '-'*80
               end
            end
         end
      end
   end
   
   # For large repos, parsing can take a while; let users know something is
   # happening.
   print '.' if i % 100 == 0 and not options['--no-progress']
end
puts if not options['--no-progress']

# People who haven't sworn at all aren't very interesting.
authorStats.delete_if {|author, swears| swears.empty?}

pp wordStats if options['--debug']
pp authorStats if options['--debug']

words = wordStats.sort {|a, b| b[1] <=> a[1]}.map {|kv| kv[0]}

puts 'Overall:'
table = Terminal::Table.new
table.headings = words
table.add_row words.map {|word| wordStats[word]}
puts table

puts 'Authors:'
table = Terminal::Table.new
table.headings = ['', 'total'] + words
sorted_stats = authorStats.sort {|a, b| b[1][:total] <=> a[1][:total]}
sorted_stats.each do |author, stats|
   table.add_row [ author, stats[:total] ] + words.map {|swear| stats[swear]}
end
puts table

